# 基数排序

> 不是计数排序。

## 1. 概念定义

**基数排序**（Radix sort）是一种非比较型的稳定的排序算法。

**工作原理**：将待排序的元素拆分为 k 个关键字，逐一对各个关键字排序后完成对所有元素的排序。

**实现原理**：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。

### 0）关键字的比较

假如 ai 、bi 分别表示元素 a 、b 的第 i 个关键字，每个元素共有 k 个关键字，默认的比较方法如下：

比较第 1 个关键字

+ a1 < b1 ：a < b
+ a1 > b1 ：a > b
+ a1 = b1 ：下一步操作

比较第 2 个关键字

+ a2 < b2 ：a < b
+ a2 > b2 ：a > b
+ a2 = b2 ：下一步操作

比较第 k 个关键字

+ ak < bk ：a < b
+ ak > bk ：a > b
+ ak = bk ：a = b

### 1）MSD 基数排序

如果是从第 1 关键字到第 k 关键字顺序进行比较（也就是从数的最高位开始），则该基数排序称为最高位优先（Most Significant Digit first）基数排序，简称 MSD 基数排序。

### 2）LSD 基数排序

如果是从第 k 关键字到第 1 关键字顺序进行比较（也就是从数的最低位开始），则该基数排序称为最低位优先（Least Significant Digit first）基数排序，简称 LSD 基数排序。

**具体实现(LSD)**：

用一个二维数组 cnt 来根据关键字保存数据，cnt 中的每一行 cnt[i]，可以当作一个队列来保存关键字为 i 的所有数；用一个一维数组 tops 来记录 cnt[i] 中的数据个数，tops[i] 表示 cnt[i] 中有 tops[i] 个数，也相当于一个队尾指针。

循环遍历待排序数据，每一次循环都求出它们的一位数，将其放入 cnt 内对应行，然后遍历 cnt 数组，将每一行的数按先后顺序取出，如同出队，并重新放入原数组中，然后进行下一次循环，直到比较完所有数据的每一位。

```java
public void radixSort(int[] arr, int maxSize) {  // (1)
    int[][] cnt = new int[10][arr.length];  // (2)
    int[] tops = new int[10];
    int curSize = 1;  // (3)
    int power = 1;  // (4)
    while (curSize <= maxSize) {  // (5)
        for (int i = 0; i < arr.length; i++) {
            int r = arr[i] / power % 10;  // (6)
            cnt[r][tops[r]++] = arr[i];  // (7)
        }
        int top = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < tops[i]; j++) {
                arr[top++] = cnt[i][j];
            }
            tops[i] = 0;  // (8)
        }
        curSize++;  
        power *= 10;  // (9)
    }
}
```

（1）：arr 是待排序数组，maxSize 是数据的最大位数

（2）：每一位上的数字只可能是 0 到 9，所以 cnt 的第一维大小为 10，第二维大小保证可以存放所有数据

（3）：curSize 表示当前的位数，用来控制循环次数

（4）：power 表示 1、10、100、1000……

（5）：最大的数有几位，就总共只需循环几次

（6）：计算当前关键字，也就是当前位上的值

（7）：根据关键字，将数放入cnt 对应位置

（8）：cnt[i] 清空后，tops[i] 也要记得归零

（9）：power 每次扩大 10 倍

## 2. 题目练习



## 3. 解题报告

**题目描述**

**解题思路**

**Java代码**

```java

```

