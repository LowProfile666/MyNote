# 二分查找——精确查找

## 1. 概念定义

**二分查找**也称折半查找（Binary Search），它是一种效率较高的查找方法，一种在**有序**数组中查找某一特定元素的搜素算法。	

以单调递增的序列为例，每次取一个中间值来与目标值进行比较，因为列表是有序的，所以

+ 如果中间值大于目标值，那说明目标值应该在中间值的左边部分，然后把搜索范围缩小；
+ 如果中间值小于目标值，那说明目标值应该在中间值的右边部分，然后把搜索范围缩小；
+ 如果中间值等于目标值，那说明找到了。

Java代码

```java
public int bianrySerach(int[] nums, int target) {
	int l = 0, r = nums.length-1;  // (0)
    while (l <= r) {  // (1)
		int m = l + r >> 1;
        if (nums[m] > target)
            r = m-1;
        else if (nums[m] < target)
            l = m+1;
        else
            return m;
    }
    return -1;
}
```

（0）：这里需要注意 r 的取值

+ r = nums.length-1：r 的位置是有效的，那么下面的（1）处应该是 l <= r，因为 r 的位置能取到。
+ r = nums.length ：r 的位置是无效的，那么下面的（1）处应该是 l < r ，因为 r 的位置取不到。

需要注意的是，在取中间值的时候，可能会碰见 l+r 造成 int 溢出的情况，所以可以将 `(l+r)/2` 写成 `l+(r-l)/2`。

## 2. 题目练习

| 题目链接                                                     | 备注 |
| ------------------------------------------------------------ | ---- |
| [704. 二分查找](https://leetcode.cn/problems/binary-search/) |      |
| [374. 猜数字大小](https://leetcode.cn/problems/guess-number-higher-or-lower/) |      |
| [167. 两数之和 II - 输入有序数组](https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/) |      |



## 3. 解题报告

[704. 二分查找](https://leetcode.cn/problems/binary-search/)

**题目描述**

> 给定一个 `n` 个元素有序的（升序）整型数组 `nums` 和一个目标值 `target` ，写一个函数搜索 `nums` 中的 `target`，如果目标值存在返回下标，否则返回 `-1`。

**解题思路**

二分查找的模板题。

**Java代码**

```java
class Solution {
    public int search(int[] nums, int target) {
        int l = 0;
        int r = nums.length;
        while(l <= r){
            int m = l + r >> 1;
            if(nums[m] == target)
                return m;
            else if(nums[m] < target)
                l = m + 1;
            else 
                r = m - 1;
        }
        return -1;
    }
}
```

[167. 两数之和 II - 输入有序数组](https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/)

**题目描述**

>给你一个下标从 **1** 开始的整数数组 `numbers` ，该数组已按 **非递减顺序排列** ，请你从数组中找出满足相加之和等于目标数 `target` 的两个数。如果设这两个数分别是 `numbers[index1]` 和 `numbers[index2]` ，则 `1 <= index1 < index2 <= numbers.length` 。
>
>以长度为 2 的整数数组 `[index1, index2]` 的形式返回这两个整数的下标 `index1` 和 `index2`。
>
>你可以假设每个输入 **只对应唯一的答案** ，而且你 **不可以** 重复使用相同的元素。
>
>你所设计的解决方案必须只使用常量级的额外空间。

**解题思路**

该题不取中间值，使用两数之和来与目标值进行比较。

**Java代码**

```java
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] res = new int[2];
        int l = 0;
        int r = numbers.length-1;
        while(l < r){
            int sum = numbers[l] + numbers[r];
            if(sum == target){
                res[0] = l+1;
                res[1] = r+1;
                return res;
            }
            else if(sum > target)
                r--;
            else
                l++;
        }
        return res;
    }
}
```



